{"version":3,"sources":["App.js","Header.js","Buttons.js","serviceWorker.js","index.js"],"names":["App","onClick","button","calculate","reset","setState","result","state","eval","e","backspace","slice","className","this","Component","ReactDOM","render","document","getElementById","Header","props","Buttons","classname","name","target","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09d0fe79.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport Header from './Header.js';\nimport Buttons from './Buttons.js';\n\nclass App extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            result: \"\"\n        }\n    }\n\n    onClick = button => {\n\n     if(button === \"=\"){\n         this.calculate()\n     }\n\n     else if(button === \"AC\"){\n         this.reset()\n     }\n\n     else {\n         this.setState({\n             result: this.state.result + button\n         })\n     }\n };\n\n    calculate = () => {\n    try {\n        this.setState({\n            result: (eval(this.state.result) || \"\" ) + \"\"\n        })\n    } catch (e) {\n        this.setState({\n            result: \"error\"\n        })\n\n    }\n};\n\nreset = () => {\n    this.setState({\n        result: \"\"\n    })\n};\n\nbackspace = () => {\n    this.setState({\n        result: this.state.result.slice(0, -1)\n    })\n};\n    render() {\n        return (\n            <div>\n                <div className=\"body\">\n                    <Header result={this.state.result}/>\n                    <Buttons onClick={this.onClick}/>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(\n<App  />,\ndocument.getElementById('root')\n);\n\nexport default App;\n","import React, {Component} from 'react';\n\n\nclass Header extends Component {\n\n\n    render() {\n        let {result} = this.props;\n        return (\n            <div className=\"result\">\n                <p>{result}</p>\n            </div>\n    )\n        ;\n    }\n}\n\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Buttons extends Component {\n\n//   state = {\n//     value: ''\n//   };\n//\n// handleValueChange = (e) => {\n//   this.setState({ value: e.target.value });\n// }\n//\n\n  render() {\n    // console.log(this.state.value)\n    return (\n    <div className=\"buttons\">\n    <div classname=\"buttonRow\">\n    <button name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</button>\n    <button name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</button>\n    <button name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</button>\n    <button name=\" - \" onClick={e => this.props.onClick(e.target.name)}>-</button>\n    </div>\n    <div classname=\"buttonRow\">\n    <button name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</button>\n    <button name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</button>\n    <button name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</button>\n    <button name=\" * \" onClick={e => this.props.onClick(e.target.name)}>x</button>\n    </div>\n    <div classname=\"buttonRow\">\n    <button name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</button>\n    <button name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</button>\n    <button name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</button>\n    <button name=\" / \" onClick={e => this.props.onClick(e.target.name)}>รท</button>\n    </div>\n    <div classname=\"buttonRow\">\n    <button name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</button>\n    <button name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</button>\n    <button name=\"AC\" onClick={e => this.props.onClick(e.target.name)}>AC</button>\n    <button name=\" + \" onClick={e => this.props.onClick(e.target.name)}>+</button>\n    </div>\n    <div classname=\"buttonRow\">\n    <button className=\"wider\" name=\"=\" onClick={e => this.props.onClick(e.target.name)}>=</button>\n    </div>\n\n    </div>\n      // <form onSubmit={this.handleSubmit}>\n      // <input\n      //  type=\"text\"\n      //  value={this.state.value}\n      //  onChange={this.handleValueChange}\n      //  placeholder=\"Enter a player's name\"\n      //  />\n      //\n      //  <input\n      //  type=\"submit\"\n      //  value=\"Add Player\"\n      //  />\n      // </form>\n    );\n  }\n}\n\n\n\n\nexport default Buttons;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}